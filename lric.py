#!/bin/python
import sys
import argparse
import re
import subprocess
import os

# Lagoon Rizzler Compiler
# Version 1.0

REPLACEMENTS = {
    "skibidi": "int",
    "based": "main",
    "gyatt": "void",
    "rizz": "return",
    "only_in_ohio": "while",
    "mewing": "for",
    "did_you_pray_today": "printf",
    "amogus": "if",
    "rizzing_up": "else",
    "baby_gronk": "true",
    "sus": "false",
    #"break": "",  

    "mid": "==",
    "bet": "=",
    "omegamid": "!=",
    "sigma": "&&",
    "alpha": "||",
    "dank": "++",
    "lame": "--",
    "aura": "*",
    "cap": "!",
    "periodt": ";",
    "goated": ">",
    "bussin": "<",
    "shook": "<=",
    "ohio": ">=",
    "womp": "%",

    "fr": "{",
    "nah": "}",
    "W": "(",
    "L": ")",
    "WL": "()",
    "valid": "break",
    "blud": "1",
    "dawg": "0"
}

includes = [
    '#include <stdio.h>',
    '#include <stdlib.h>',
    '#include <string.h>',
    '#include <math.h>',
    '#include <errno.h>',
    '#include <assert.h>',
    '#include <ctype.h>',
    '#include <stdbool.h>',
    '#include <time.h>',
    '#include <limits.h>'
]

def replace_words(input_file, output_file):
    with open(input_file, 'r') as infile:
        content = infile.read()

    for key, value in REPLACEMENTS.items():
        # Using \b to ensure word boundaries
        pattern = r'\b{}\b'.format(re.escape(key))
        content = re.sub(pattern, value, content)
    
    addIncludes = '\n'.join(includes) + '\n\n'
    contentsWithIcludes = addIncludes + content
    with open(output_file, 'w') as outfile:
        outfile.write(contentsWithIcludes)

def compile_c_file(source_file, output_file):
    # Compile the C file using GCC
    command = ['gcc', '-lm', '-o', output_file, source_file]
    try:
        subprocess.run(command, check=True)
        print(f"Compilation successful. Output binary: {output_file}")
    except subprocess.CalledProcessError as e:
        print(f"Error during compilation: {e}")
        sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description='Compiler for the Rizzler language.')
    parser.add_argument('input', type=str, help='Input file')
    parser.add_argument('-o', '--output', type=str, default='a.out', help='Output file (default: a.out)')
    parser.add_argument('-k', '--keep', type=str, help='Keep the intermediary .c files generated by the compiler.')
    parser.add_argument('-v', '--version', type=str, help='Print the version number of the compiler.')

    args = parser.parse_args()

    if (args.version):
        print("Lagoon Rizzler Compiler V1.0")
        sys.exit(0)

    if not args.input:
        print("Error: Input file must be specified.")
        sys.exit(1)

    replace_words(args.input, "intermediary.c")
    print(f"Output written to {args.output}")

    compile_c_file("intermediary.c", args.output)
    if (os.path.isfile("intermediary.c") and not args.keep):
        os.remove("intermediary.c")
    

    print("Compiling done.")


if __name__ == "__main__":
    main()
